openapi: 3.0.3
info:
  title: Knot - Image Sharing Service API
  description: |
    Knot图片分享系统API文档

    ## 功能特性
    - 用户认证与授权（JWT）
    - 多图片帖子发布（1-9张图片）
    - 图片上传与管理
    - 标签系统
    - Feed流推荐
    - 点赞与收藏功能（v2.2.0）
    - 分享系统与短链接（v2.3.0）
    - **图片URL自动前缀（v2.4.0）**

    ## 🔔 重要说明：图片URL自动前缀（v2.4.0新增）

    **所有返回的图片路径已自动添加服务器URL前缀**，客户端可直接使用返回的完整URL访问图片。

    **影响字段**：
    - `file_url` - 原图URL
    - `thumbnail_url` - 缩略图URL  
    - `cover_image_url` - 封面图URL
    - `avatar_url` - 用户头像URL

    **返回格式示例**：
    ```json
    {
      "file_url": "http://8.138.115.164:8080/uploads/images/IMG_2025Q4_xxx.jpg",
      "thumbnail_url": "http://8.138.115.164:8080/uploads/thumbnails/IMG_2025Q4_xxx_thumb.jpg"
    }
    ```

    **配置说明**：
    - 生产环境：自动使用 `http://8.138.115.164:8080` 作为前缀
    - 开发环境：可在 `config.json` 中配置 `server.base_url` 自定义前缀
    - 相对路径模式：设置 `server.base_url: ""` 返回相对路径（用于本地开发）

    ## 安全说明
    - 密码使用PBKDF2-HMAC-SHA256加密（100,000次迭代）
    - JWT令牌使用HS256签名算法
    - 所有数据库查询使用预编译语句防止SQL注入

    ## 版本更新
    - v2.4.0: 图片URL自动前缀功能，完善API文档
    - v2.3.0: 新增分享系统（短链接、Deep Link）
    - v2.2.0: 新增点赞和收藏功能
    - v2.1.0: 新增用户信息管理功能
    - v2.0.0: 新增多图片帖子系统
    - v1.2.0: 基础图片管理功能
  version: 2.4.0
  contact:
    name: Knot Team
    email: support@knot.example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080/api/v1
    description: 本地开发服务器
  - url: http://8.138.115.164:8080/api/v1
    description: 云服务器测试环境

tags:
  - name: 认证
    description: 用户认证相关接口
  - name: 用户管理
    description: 用户信息查询和修改（v2.1新增）
  - name: 帖子管理
    description: 多图片帖子的创建、查询、编辑、删除（v2.0新增）
  - name: 点赞
    description: 帖子点赞功能（v2.2新增）
  - name: 收藏
    description: 帖子收藏功能（v2.2新增）
  - name: 分享
    description: 帖子分享与短链接（v2.3新增）
  - name: 图片管理
    description: 图片上传、查询、编辑、删除
  - name: 系统
    description: 系统健康检查和监控

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT访问令牌

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          description: 物理ID
          example: 1
        user_id:
          type: string
          description: 逻辑ID
          example: "USR_2025Q1_A1B2C3"
        username:
          type: string
          description: 用户名
          example: "zhangsan"
        real_name:
          type: string
          description: 真实姓名
          example: "张三"
        phone:
          type: string
          description: 手机号
          example: "13800138000"
        email:
          type: string
          description: 邮箱
          example: "zhangsan@example.com"
        role:
          type: string
          enum: [USER, ADMIN]
          description: 用户角色
          example: "USER"
        status:
          type: string
          enum: [active, inactive, banned]
          description: 账户状态
          example: "active"
        avatar_url:
          type: string
          description: 头像URL（v2.4.0起自动添加服务器前缀）
          example: "http://8.138.115.164:8080/uploads/avatars/user123.jpg"
        device_count:
          type: integer
          description: 设备数量
          example: 0
        create_time:
          type: integer
          format: int64
          description: 创建时间（Unix时间戳）
          example: 1704067200
        update_time:
          type: integer
          format: int64
          description: 更新时间（Unix时间戳）
          example: 1704067200

    Image:
      type: object
      properties:
        id:
          type: integer
          description: 物理ID
          example: 1
        image_id:
          type: string
          description: 业务逻辑ID
          example: "IMG_2025Q4_123456"
        user_id:
          type: integer
          description: 用户ID
          example: 1
        title:
          type: string
          description: 图片标题
          example: "美丽的风景"
        description:
          type: string
          description: 图片描述
          example: "今天拍摄的日落"
        file_url:
          type: string
          description: 图片文件URL（v2.4.0起自动添加服务器前缀）
          example: "http://8.138.115.164:8080/uploads/images/IMG_2025Q4_abc123.jpg"
        thumbnail_url:
          type: string
          description: 缩略图URL（v2.4.0起自动添加服务器前缀）
          example: "http://8.138.115.164:8080/uploads/thumbnails/IMG_2025Q4_abc123_thumb.jpg"
        file_size:
          type: integer
          description: 文件大小（字节）
          example: 1024000
        width:
          type: integer
          description: 图片宽度
          example: 1920
        height:
          type: integer
          description: 图片高度
          example: 1080
        mime_type:
          type: string
          description: MIME类型
          example: "image/jpeg"
        like_count:
          type: integer
          description: 点赞数
          example: 10
        favorite_count:
          type: integer
          description: 收藏数
          example: 5
        view_count:
          type: integer
          description: 浏览数
          example: 100
        status:
          type: string
          enum: [PENDING, APPROVED, REJECTED]
          description: 审核状态
          example: "APPROVED"
        create_time:
          type: integer
          format: int64
          description: 创建时间（Unix时间戳）
          example: 1759844400
        update_time:
          type: integer
          format: int64
          description: 更新时间（Unix时间戳）
          example: 1759844400

    Post:
      type: object
      properties:
        id:
          type: integer
          description: 物理ID
          example: 1
        post_id:
          type: string
          description: 业务逻辑ID
          example: "POST_2025Q4_123456"
        user_id:
          type: integer
          description: 用户ID
          example: 1
        title:
          type: string
          description: 帖子标题
          example: "美好的一天"
        description:
          type: string
          description: 帖子描述/配文
          example: "今天天气真好！"
        image_count:
          type: integer
          description: 图片数量
          example: 3
        like_count:
          type: integer
          description: 点赞数
          example: 10
        favorite_count:
          type: integer
          description: 收藏数
          example: 5
        view_count:
          type: integer
          description: 浏览数
          example: 100
        share_count:
          type: integer
          description: 分享数
          example: 2
        comment_count:
          type: integer
          description: 评论数
          example: 8
        status:
          type: string
          enum: [PENDING, APPROVED, REJECTED]
          description: 审核状态
          example: "APPROVED"
        create_time:
          type: integer
          format: int64
          description: 创建时间（Unix时间戳）
          example: 1759844400
        update_time:
          type: integer
          format: int64
          description: 更新时间（Unix时间戳）
          example: 1759844400
        images:
          type: array
          description: 帖子包含的图片列表
          items:
            $ref: '#/components/schemas/Image'
        tags:
          type: array
          description: 帖子标签
          items:
            type: string
          example: ["风景", "旅行"]

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "操作成功"
        data:
          type: object
        timestamp:
          type: integer
          format: int64
          example: 1759844400

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "错误描述"
        data:
          type: object
          nullable: true
          example: null
        timestamp:
          type: integer
          format: int64
          example: 1759844400

    LikeStatusResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                post_id:
                  type: string
                  description: 帖子ID
                  example: "POST_2025Q4_ABC123"
                has_liked:
                  type: boolean
                  description: 是否已点赞
                  example: true
                like_count:
                  type: integer
                  description: 点赞总数
                  example: 10

    FavoriteStatusResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                post_id:
                  type: string
                  description: 帖子ID
                  example: "POST_2025Q4_ABC123"
                has_favorited:
                  type: boolean
                  description: 是否已收藏
                  example: true
                favorite_count:
                  type: integer
                  description: 收藏总数
                  example: 5

    FavoriteListResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                posts:
                  type: array
                  description: 收藏的帖子列表
                  items:
                    $ref: '#/components/schemas/Post'
                total:
                  type: integer
                  description: 总收藏数
                  example: 15
                page:
                  type: integer
                  description: 当前页码
                  example: 1
                page_size:
                  type: integer
                  description: 每页数量
                  example: 20
                total_pages:
                  type: integer
                  description: 总页数
                  example: 1

    ShareLink:
      type: object
      properties:
        short_code:
          type: string
          description: 短链接代码（8位Base62编码）
          example: "kHr7ZS9a"
        short_url:
          type: string
          description: 完整短链接URL
          example: "http://8.138.115.164:8080/s/kHr7ZS9a"
        post_id:
          type: string
          description: 帖子ID
          example: "POST_2025Q4_ABC123"
        create_time:
          type: integer
          format: int64
          description: 创建时间（Unix时间戳）
          example: 1728360600
        expire_time:
          type: integer
          format: int64
          nullable: true
          description: 过期时间（null表示永久有效）
          example: null

    ShareLinkResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/ShareLink'

    SharePostResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                post:
                  $ref: '#/components/schemas/Post'
                share_info:
                  type: object
                  properties:
                    short_code:
                      type: string
                      example: "kHr7ZS9a"
                    create_time:
                      type: integer
                      format: int64
                      example: 1728360600

    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: 用户名/手机号/邮箱
          example: "zhangsan"
        password:
          type: string
          format: password
          description: 密码
          example: "password123"

    LoginResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                access_token:
                  type: string
                  description: 访问令牌（有效期1小时）
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                refresh_token:
                  type: string
                  description: 刷新令牌（有效期24小时）
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                user:
                  $ref: '#/components/schemas/User'

    RegisterRequest:
      type: object
      required:
        - username
        - password
        - real_name
        - phone
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
          pattern: '^[a-zA-Z0-9_]+$'
          description: 用户名（3-50字符，字母数字下划线）
          example: "zhangsan"
        password:
          type: string
          format: password
          minLength: 6
          maxLength: 100
          description: 密码（6-100字符）
          example: "password123"
        real_name:
          type: string
          maxLength: 50
          description: 真实姓名
          example: "张三"
        phone:
          type: string
          pattern: '^1[3-9]\d{9}$'
          description: 手机号（11位中国手机号）
          example: "13800138000"
        email:
          type: string
          format: email
          description: 邮箱（可选）
          example: "zhangsan@example.com"
        role:
          type: string
          enum: [USER, ADMIN]
          default: USER
          description: 用户角色
          example: "USER"

    UserProfileUpdateRequest:
      type: object
      properties:
        real_name:
          type: string
          maxLength: 50
          description: 真实姓名
          example: "张三"
        phone:
          type: string
          pattern: '^1[3-9]\d{9}$'
          description: 手机号（11位中国手机号）
          example: "13800138000"
        email:
          type: string
          format: email
          description: 邮箱
          example: "zhangsan@example.com"
        bio:
          type: string
          maxLength: 500
          description: 个人简介
          example: "热爱摄影和旅行"
        avatar_url:
          type: string
          maxLength: 500
          description: 头像URL（v2.4.0起自动添加服务器前缀）
          example: "https://example.com/avatars/user123.jpg"
        location:
          type: string
          maxLength: 100
          description: 所在地
          example: "北京市朝阳区"
        website:
          type: string
          maxLength: 200
          description: 个人网站
          example: "https://zhangsan.com"

    PublicUserProfile:
      type: object
      properties:
        user_id:
          type: integer
          description: 用户ID
          example: 1
        username:
          type: string
          description: 用户名
          example: "zhangsan"
        real_name:
          type: string
          description: 真实姓名
          example: "张三"
        bio:
          type: string
          description: 个人简介
          example: "热爱摄影和旅行"
        avatar_url:
          type: string
          description: 头像URL（v2.4.0起自动添加服务器前缀）
          example: "http://8.138.115.164:8080/uploads/avatars/user123.jpg"
        location:
          type: string
          description: 所在地
          example: "北京市朝阳区"
        website:
          type: string
          description: 个人网站
          example: "https://zhangsan.com"
        follower_count:
          type: integer
          description: 粉丝数
          example: 1250
        following_count:
          type: integer
          description: 关注数
          example: 350
        post_count:
          type: integer
          description: 帖子数
          example: 89
        total_likes:
          type: integer
          description: 获赞总数
          example: 5680
        create_time:
          type: integer
          format: int64
          description: 注册时间（Unix时间戳）
          example: 1759844400

    ImageUploadRequest:
      type: object
      required:
        - image
        - title
      properties:
        image:
          type: string
          format: binary
          description: 图片文件（支持JPEG/PNG/WebP，最大5MB）
        title:
          type: string
          maxLength: 255
          description: 推文标题
          example: "美丽的风景"
        description:
          type: string
          description: 推文配文
          example: "今天拍摄的日落"
        tags:
          type: string
          description: 标签列表（逗号分隔，最多5个）
          example: "风景,日落,摄影"

    ImageUpdateRequest:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          maxLength: 255
          description: 新标题
          example: "更新后的标题"
        description:
          type: string
          description: 新配文
          example: "更新后的配文"

    ImageListResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                total:
                  type: integer
                  description: 总数量
                  example: 100
                page:
                  type: integer
                  description: 当前页码
                  example: 1
                page_size:
                  type: integer
                  description: 每页数量
                  example: 20
                images:
                  type: array
                  items:
                    $ref: '#/components/schemas/Image'

paths:
  /auth/register:
    post:
      tags:
        - 认证
      summary: 用户注册
      description: 注册新用户账号
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: 注册成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'
        '400':
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                usernameExists:
                  value:
                    success: false
                    message: "用户名已存在"
                    data: null
                phoneExists:
                  value:
                    success: false
                    message: "手机号已被注册"
                    data: null

  /auth/login:
    post:
      tags:
        - 认证
      summary: 用户登录
      description: 用户登录获取访问令牌
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: 登录成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: 认证失败
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                wrongPassword:
                  value:
                    success: false
                    message: "密码错误"
                    data: null
                userNotFound:
                  value:
                    success: false
                    message: "用户不存在"
                    data: null

  /auth/validate:
    post:
      tags:
        - 认证
      summary: 令牌验证
      description: 验证JWT访问令牌是否有效
      operationId: validateToken
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  description: JWT访问令牌
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '200':
          description: 令牌验证结果
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "令牌有效"
                  data:
                    type: object
                    properties:
                      user_id:
                        type: integer
                        example: 1
                      username:
                        type: string
                        example: "zhangsan"

  /auth/refresh:
    post:
      tags:
        - 认证
      summary: 令牌刷新
      description: 使用刷新令牌获取新的访问令牌
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refresh_token
              properties:
                refresh_token:
                  type: string
                  description: JWT刷新令牌
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '200':
          description: 令牌刷新成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          access_token:
                            type: string
                            example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                          refresh_token:
                            type: string
                            example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '401':
          description: 刷新令牌无效
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      tags:
        - 认证
      summary: 用户登出
      description: 用户登出（JWT令牌自动过期）
      operationId: logout
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - access_token
              properties:
                access_token:
                  type: string
                  description: JWT访问令牌
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '200':
          description: 登出成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /auth/password:
    put:
      tags:
        - 认证
      summary: 修改密码
      description: 修改用户密码
      operationId: changePassword
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
                - old_password
                - new_password
              properties:
                user_id:
                  type: integer
                  description: 用户ID
                  example: 1
                old_password:
                  type: string
                  format: password
                  description: 旧密码
                  example: "password123"
                new_password:
                  type: string
                  format: password
                  minLength: 6
                  maxLength: 100
                  description: 新密码（6-100字符）
                  example: "newpassword456"
      responses:
        '200':
          description: 密码修改成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 旧密码不正确
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/users/profile:
    get:
      tags:
        - 用户管理
      summary: 获取当前用户信息
      description: 获取当前登录用户的完整个人信息
      operationId: getUserProfile
      security:
        - BearerAuth: []
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'
        '401':
          description: 未授权
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - 用户管理
      summary: 更新用户信息
      description: 更新当前登录用户的个人信息
      operationId: updateUserProfile
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileUpdateRequest'
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'
        '400':
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 未授权
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/users/check-username:
    get:
      tags:
        - 用户管理
      summary: 检查用户名可用性
      description: 检查用户名是否已被使用
      operationId: checkUsernameAvailability
      parameters:
        - name: username
          in: query
          required: true
          schema:
            type: string
            minLength: 3
            maxLength: 50
          description: 要检查的用户名
          example: "newuser123"
      responses:
        '200':
          description: 检查成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          available:
                            type: boolean
                            description: 用户名是否可用
                            example: true
                          username:
                            type: string
                            description: 检查的用户名
                            example: "newuser123"
        '400':
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/users/{user_id}:
    get:
      tags:
        - 用户管理
      summary: 获取用户公开信息
      description: 获取指定用户的公开个人信息（不包括敏感信息）
      operationId: getPublicUserProfile
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
          description: 用户ID
          example: 1
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/PublicUserProfile'
        '404':
          description: 用户不存在
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /posts:
    post:
      tags:
        - 帖子管理
      summary: 创建帖子
      description: |
        创建多图片帖子（1-9张图片）

        **注意**：使用multipart/form-data格式上传
        - title: 帖子标题（必填）
        - description: 帖子描述/配文（可选）
        - imageFiles: 图片文件，可以多次使用此字段上传多张图片（1-9张）
        - tags: 标签，可以多次使用此字段添加多个标签（可选）
      operationId: createPost
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - title
                - imageFiles
              properties:
                title:
                  type: string
                  description: 帖子标题
                  example: "美好的一天"
                description:
                  type: string
                  description: 帖子描述/配文
                  example: "今天天气真好！"
                imageFiles:
                  type: array
                  description: 图片文件（1-9张）
                  items:
                    type: string
                    format: binary
                  minItems: 1
                  maxItems: 9
                tags:
                  type: array
                  description: 标签列表
                  items:
                    type: string
                  example: ["风景", "旅行"]
      responses:
        '201':
          description: 帖子创建成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          post:
                            $ref: '#/components/schemas/Post'
        '400':
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalidImageCount:
                  value:
                    success: false
                    message: "图片数量必须在1-9张之间"
                    data: null
                invalidFileType:
                  value:
                    success: false
                    message: "只能上传图片文件"
                    data: null
                fileTooLarge:
                  value:
                    success: false
                    message: "图片文件大小不能超过5MB"
                    data: null
        '401':
          description: 未授权
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - 帖子管理
      summary: 获取Feed流
      description: 获取最新帖子列表（按时间倒序）
      operationId: getRecentPosts
      parameters:
        - name: page
          in: query
          description: 页码（从1开始）
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: page_size
          in: query
          description: 每页数量
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          posts:
                            type: array
                            items:
                              $ref: '#/components/schemas/Post'
                          total:
                            type: integer
                            description: 总数
                            example: 100
                          page:
                            type: integer
                            description: 当前页码
                            example: 1
                          page_size:
                            type: integer
                            description: 每页数量
                            example: 20

  /posts/{post_id}:
    get:
      tags:
        - 帖子管理
      summary: 获取帖子详情
      description: 根据帖子ID获取帖子详细信息
      operationId: getPostDetail
      parameters:
        - name: post_id
          in: path
          required: true
          description: 帖子ID
          schema:
            type: string
            example: "POST_2025Q4_123456"
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          post:
                            $ref: '#/components/schemas/Post'
        '404':
          description: 帖子不存在
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - 帖子管理
      summary: 更新帖子
      description: 更新帖子的标题、描述或标签
      operationId: updatePost
      security:
        - BearerAuth: []
      parameters:
        - name: post_id
          in: path
          required: true
          description: 帖子ID
          schema:
            type: string
            example: "POST_2025Q4_123456"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: 新标题
                  example: "更新后的标题"
                description:
                  type: string
                  description: 新描述
                  example: "更新后的描述"
                tags:
                  type: array
                  description: 新标签列表
                  items:
                    type: string
                  example: ["风景", "旅行", "美食"]
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 未授权
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: 无权限（不是帖子作者）
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 帖子不存在
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - 帖子管理
      summary: 删除帖子
      description: 删除指定的帖子及其所有图片
      operationId: deletePost
      security:
        - BearerAuth: []
      parameters:
        - name: post_id
          in: path
          required: true
          description: 帖子ID
          schema:
            type: string
            example: "POST_2025Q4_123456"
      responses:
        '200':
          description: 删除成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: 未授权
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: 无权限（不是帖子作者）
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 帖子不存在
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{user_id}/posts:
    get:
      tags:
        - 帖子管理
      summary: 获取用户帖子列表
      description: 获取指定用户的所有帖子
      operationId: getUserPosts
      parameters:
        - name: user_id
          in: path
          required: true
          description: 用户ID
          schema:
            type: integer
            example: 1
        - name: page
          in: query
          description: 页码（从1开始）
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: page_size
          in: query
          description: 每页数量
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          posts:
                            type: array
                            items:
                              $ref: '#/components/schemas/Post'
                          total:
                            type: integer
                            description: 总数
                            example: 50
                          page:
                            type: integer
                            description: 当前页码
                            example: 1
                          page_size:
                            type: integer
                            description: 每页数量
                            example: 20

  /posts/{post_id}/images:
    post:
      tags:
        - 帖子管理
      summary: 向帖子添加图片
      description: 向已存在的帖子添加新图片（最多9张）
      operationId: addImageToPost
      security:
        - BearerAuth: []
      parameters:
        - name: post_id
          in: path
          required: true
          description: 帖子ID
          schema:
            type: string
            example: "POST_2025Q4_123456"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - imageFile
              properties:
                imageFile:
                  type: string
                  format: binary
                  description: 图片文件
      responses:
        '201':
          description: 图片添加成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          image:
                            $ref: '#/components/schemas/Image'
        '400':
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                tooManyImages:
                  value:
                    success: false
                    message: "帖子图片数量已达上限（9张）"
                    data: null
        '401':
          description: 未授权
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: 无权限（不是帖子作者）
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 帖子不存在
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /posts/{post_id}/images/{image_id}:
    delete:
      tags:
        - 帖子管理
      summary: 删除帖子中的图片
      description: 从帖子中删除指定的图片
      operationId: removeImageFromPost
      security:
        - BearerAuth: []
      parameters:
        - name: post_id
          in: path
          required: true
          description: 帖子ID
          schema:
            type: string
            example: "POST_2025Q4_123456"
        - name: image_id
          in: path
          required: true
          description: 图片ID
          schema:
            type: string
            example: "IMG_2025Q4_123456"
      responses:
        '200':
          description: 删除成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                lastImage:
                  value:
                    success: false
                    message: "帖子至少需要保留一张图片"
                    data: null
        '401':
          description: 未授权
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: 无权限（不是帖子作者）
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 帖子或图片不存在
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /posts/{post_id}/images/order:
    put:
      tags:
        - 帖子管理
      summary: 调整图片顺序
      description: 调整帖子中图片的显示顺序
      operationId: reorderImages
      security:
        - BearerAuth: []
      parameters:
        - name: post_id
          in: path
          required: true
          description: 帖子ID
          schema:
            type: string
            example: "POST_2025Q4_123456"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - image_ids
              properties:
                image_ids:
                  type: array
                  description: 图片ID列表（按新顺序排列）
                  items:
                    type: string
                  example: ["IMG_2025Q4_123456", "IMG_2025Q4_789012", "IMG_2025Q4_345678"]
      responses:
        '200':
          description: 调整成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 未授权
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: 无权限（不是帖子作者）
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 帖子不存在
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /images:
    post:
      tags:
        - 图片管理
      summary: 上传图片
      description: 用户上传图文推文（图片为主 + 配文）
      operationId: uploadImage
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ImageUploadRequest'
      responses:
        '201':
          description: 图片上传成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Image'
        '400':
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 未授权
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags:
        - 图片管理
      summary: 获取最新图片列表
      description: 获取最新发布的图文推文列表（按时间倒序）
      operationId: getRecentImages
      parameters:
        - name: page
          in: query
          description: 页码（从1开始）
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
            example: 1
        - name: page_size
          in: query
          description: 每页数量（最大100）
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
            example: 20
      responses:
        '200':
          description: 查询成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageListResponse'
        '400':
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /images/{id}:
    get:
      tags:
        - 图片管理
      summary: 获取图片详情
      description: 获取指定图文推文的详细信息（会增加浏览数）
      operationId: getImageById
      parameters:
        - name: id
          in: path
          description: 图片业务逻辑ID（image_id）
          required: true
          schema:
            type: string
            example: "IMG_2025Q4_123456"
      responses:
        '200':
          description: 查询成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Image'
        '404':
          description: 图片不存在
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - 图片管理
      summary: 更新图文配文
      description: 更新图文推文的标题和配文（只有所有者可以编辑）
      operationId: updateImage
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: 图片业务逻辑ID（image_id）
          required: true
          schema:
            type: string
            example: "IMG_2025Q4_123456"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageUpdateRequest'
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 未授权
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: 无权限或图片不存在
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - 图片管理
      summary: 删除图片
      description: 删除图文推文（只有所有者可以删除）
      operationId: deleteImage
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: 图片业务逻辑ID（image_id）
          required: true
          schema:
            type: string
            example: "IMG_2025Q4_123456"
      responses:
        '200':
          description: 删除成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: 未授权
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: 无权限或图片不存在
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{id}/images:
    get:
      tags:
        - 图片管理
      summary: 获取用户图片列表
      description: 获取指定用户发布的图文推文列表
      operationId: getUserImages
      parameters:
        - name: id
          in: path
          description: 用户ID
          required: true
          schema:
            type: integer
            example: 1
        - name: page
          in: query
          description: 页码（从1开始）
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
            example: 1
        - name: page_size
          in: query
          description: 每页数量（最大100）
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
            example: 20
      responses:
        '200':
          description: 查询成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageListResponse'
        '400':
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /health:
    get:
      tags:
        - 系统
      summary: 健康检查
      description: 检查服务是否正常运行
      operationId: healthCheck
      responses:
        '200':
          description: 服务正常
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  timestamp:
                    type: integer
                    format: int64
                    example: 1704067200

  /metrics:
    get:
      tags:
        - 系统
      summary: 系统指标
      description: 获取系统运行指标
      operationId: getMetrics
      responses:
        '200':
          description: 指标获取成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  uptime:
                    type: integer
                    description: 运行时间（秒）
                    example: 3600
                  requests_total:
                    type: integer
                    description: 总请求数
                    example: 1234
                  database_connections:
                    type: integer
                    description: 数据库连接数
                    example: 10

  /version:
    get:
      tags:
        - 系统
      summary: 版本信息
      description: 获取API版本信息
      operationId: getVersion
      responses:
        '200':
          description: 版本信息获取成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    type: string
                    example: "2.4.0"
                  service:
                    type: string
                    example: "Knot - Image Sharing Service"
                  timestamp:
                    type: integer
                    format: int64
                    example: 1704067200

  /posts/{post_id}/like:
    post:
      tags:
        - 点赞
      summary: 点赞帖子
      description: 为指定帖子点赞
      operationId: likePost
      security:
        - BearerAuth: []
      parameters:
        - name: post_id
          in: path
          description: 帖子业务ID
          required: true
          schema:
            type: string
            example: "POST_2025Q4_ABC123"
      responses:
        '200':
          description: 点赞成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LikeStatusResponse'
        '400':
          description: 已经点赞过该帖子
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 未授权
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 帖子不存在
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - 点赞
      summary: 取消点赞
      description: 取消对帖子的点赞
      operationId: unlikePost
      security:
        - BearerAuth: []
      parameters:
        - name: post_id
          in: path
          description: 帖子业务ID
          required: true
          schema:
            type: string
            example: "POST_2025Q4_ABC123"
      responses:
        '200':
          description: 取消点赞成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LikeStatusResponse'
        '400':
          description: 尚未点赞该帖子
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 未授权
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 帖子不存在
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /posts/{post_id}/like/status:
    get:
      tags:
        - 点赞
      summary: 查询点赞状态
      description: 查询当前用户对指定帖子的点赞状态
      operationId: getLikeStatus
      security:
        - BearerAuth: []
      parameters:
        - name: post_id
          in: path
          description: 帖子业务ID
          required: true
          schema:
            type: string
            example: "POST_2025Q4_ABC123"
      responses:
        '200':
          description: 查询成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LikeStatusResponse'
        '401':
          description: 未授权
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 帖子不存在
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /posts/{post_id}/favorite:
    post:
      tags:
        - 收藏
      summary: 收藏帖子
      description: 收藏指定帖子
      operationId: favoritePost
      security:
        - BearerAuth: []
      parameters:
        - name: post_id
          in: path
          description: 帖子业务ID
          required: true
          schema:
            type: string
            example: "POST_2025Q4_ABC123"
      responses:
        '200':
          description: 收藏成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoriteStatusResponse'
        '400':
          description: 已经收藏过该帖子
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 未授权
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 帖子不存在
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - 收藏
      summary: 取消收藏
      description: 取消收藏帖子
      operationId: unfavoritePost
      security:
        - BearerAuth: []
      parameters:
        - name: post_id
          in: path
          description: 帖子业务ID
          required: true
          schema:
            type: string
            example: "POST_2025Q4_ABC123"
      responses:
        '200':
          description: 取消收藏成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoriteStatusResponse'
        '400':
          description: 尚未收藏该帖子
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 未授权
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 帖子不存在
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /posts/{post_id}/favorite/status:
    get:
      tags:
        - 收藏
      summary: 查询收藏状态
      description: 查询当前用户对指定帖子的收藏状态
      operationId: getFavoriteStatus
      security:
        - BearerAuth: []
      parameters:
        - name: post_id
          in: path
          description: 帖子业务ID
          required: true
          schema:
            type: string
            example: "POST_2025Q4_ABC123"
      responses:
        '200':
          description: 查询成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoriteStatusResponse'
        '401':
          description: 未授权
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 帖子不存在
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /my/favorites:
    get:
      tags:
        - 收藏
      summary: 获取用户收藏列表
      description: 获取当前用户的收藏帖子列表（分页）
      operationId: getUserFavorites
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: 页码（从1开始）
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
            example: 1
        - name: page_size
          in: query
          description: 每页数量（最大100）
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
            example: 20
      responses:
        '200':
          description: 查询成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoriteListResponse'
        '401':
          description: 未授权
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: 参数错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /posts/{post_id}/share:
    post:
      tags:
        - 分享
      summary: 创建帖子分享链接
      description: 为帖子创建分享短链接，支持iOS/Android/HarmonyOS三端Deep Link
      operationId: createShareLink
      security:
        - BearerAuth: []
      parameters:
        - name: post_id
          in: path
          description: 帖子业务ID
          required: true
          schema:
            type: string
            example: "POST_2025Q4_ABC123"
      responses:
        '200':
          description: 分享链接创建成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShareLinkResponse'
        '401':
          description: 未授权
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 帖子不存在
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /share/{code}:
    get:
      tags:
        - 分享
      summary: 解析分享链接
      description: 根据短链接代码获取帖子信息（公开接口，无需认证）
      operationId: resolveShareLink
      parameters:
        - name: code
          in: path
          description: 短链接代码
          required: true
          schema:
            type: string
            example: "kHr7ZS9a"
      responses:
        '200':
          description: 查询成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharePostResponse'
        '404':
          description: 分享链接不存在或已过期
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

